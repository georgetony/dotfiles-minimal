## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet php  "New PHP Tag" b
<?php
	${0}
?>
endsnippet

snippet sphp
	<?php ${1} ?>
endsnippet

snippet arr "array multiline"
array(
	${1}
);${0}
endsnippet

# Array on single line
snippet arrl "array single line"
array('${1}' => ${2});${0}
endsnippet

snippet def "def"
define('${1:VARIABLE_NAME}', ${2:'definition'});${3}
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet fun "Function with DOCBLOC"
/**
 * $2
 * ${6:explanation}
 * @return ${4:void}
 * @author ${5:`echo $USER`}
 **/
${1:public }function ${2:someFunc}(${3}) {
	${7}
}
endsnippet

snippet interface "Interface"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1:someClass}
{${4}
} // END interface $1"
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet foreach "Foreach loop without key"
foreach ($${1:variable} as $${3:value}) {
	${VISUAL}${4}
}
$0
endsnippet

snippet foreachk "foreach with key"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
	${4:// code...}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1:/* condition */}) {
	${2:${VISUAL:}}${3}
}${4}
endsnippet

snippet elif "elseif"
elseif (${1:/* condition */}) {
	${2:${VISUAL:}}${3}
}${4}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req "req1"
require_once '${1:file}';${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet t "t"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" b
/**
 * Getter for $1
 *
 * ${2:return string}
 */
public function get${1/\w+\s*/\u$0/}() {
    return $this->$1;$3
}
endsnippet

snippet setter "PHP Class Setter" b
/**
 * Setter for $1
 *
 * @param ${2:string} $$1                                                                                                                               
 * @return ${3:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${4:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1) {
    $this->$1 = $$1;$5

    ${6:return $this;}
}
$0
endsnippet

snippet gs "PHP Class Getter Setter" b
/**
 * Getter for $1
 *
 * return ${2:string}
 */
public function get${1/\w+\s*/\u$0/}() {
    return $this->$1;$3
}

/**
 * Setter for $1
 *
 * @param $2 $$1
 * @return ${4:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${5:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1) {
    $this->$1 = $$1;$6

    ${7:return $this;}
}
$0
endsnippet

snippet pub "Public function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
public function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pro "Protected function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
protected function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pri "Private function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
private function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pubs "Public static function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
public static function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pros "Protected static function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
protected static function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pris "Private static function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
private static function ${1:name}(${2:$param}) {
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet fu "Function without docblock" b
function ${1:name}(${2:$param}) {
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet new "New class instance" b
$${1:variableName} = new ${2:${1/\w+\s*/\u$0/}}($3);
$0
endsnippet

snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...}
} else {
	${3:// code...}
}
$0
endsnippet

snippet ns "namespace declaration" b
namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};
endsnippet

snippet class "Class declaration template" b
<?php

namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Class ${1:`!p snip.rv=snip.basename`}
 * @author ${2:`!v g:snips_author`}
 */
class $1
{
}
endsnippet

snippet interface "Interface declaration template" b
<?php

namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Interface ${1:`!p snip.rv=snip.basename`}
 * @author ${2:`!v g:snips_author`}
 */
interface $1
{
	public function ${3:someFunction}();$4                                                                                                              
}
endsnippet


snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
$0
endsnippet

snippet ve "Dumb debug helper in HTML"
    echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

# CAKE PHP related 
#
#

snippet debug "debug"
debug($${1:${VISUAL:this->request->data}});
endsnippet

snippet debugp "debug"
debug($${1:this->pData});
endsnippet

snippet debugex "debugex"
debug($${1:this->request->data}); exit();
endsnippet

# Layout variables
snippet content_for_layout "echo $content_for_layout"
	<?php echo $content_for_layout; ?>
endsnippet

snippet scripts_for_layout "echo $scripts_for_layout"
	<?php echo $scripts_for_layout; ?>
endsnippet

snippet title_for_layout "echo $title_for_layout"
	<?php echo $title_for_layout; ?>
endsnippet

# Form helper
snippet form "Start Form"
	<?php echo $this->Form->create('${1:Model}'$2); ?>
endsnippet

snippet end "End Form"
	<?php echo $this->Form->end($3); ?>
endsnippet

snippet date "Date Time form input"
	<?php echo $this->Form->dateTime('${1:Model}.${2:field}'$3); ?>
endsnippet

snippet day "Day form input"
	<?php echo $this->Form->day('${1:Model}.${2:field}'$3); ?>
endsnippet

snippet file "File form input"
	<?php echo $this->Form->file('${1:Model}.${2:field}'$3); ?>
endsnippet

snippet hid "Hidden input"
	<?php
		$this->Form->input('${1:field}', array(
			'type' => 'hidden'
		));${2}
	?>
endsnippet

snippet input "Input CakePHP form"
	<?php
		echo $this->Form->input('${1:Model}.${2:field}'$3, array(
			${3}
		));${4}
	?>
endsnippet

snippet year "Year select CakePHP form"
	<?php echo $this->Form->year('${1:Model}.${2:field}'$3); ?>
endsnippet

# HTML helper
snippet char "HTML Charset CakePHP"
	<?php echo $this->Html->charset($1); ?>
endsnippet

snippet css "HTML css file CakePHP"
	<?php echo $this->Html->css(array('${1:filename}'$2)$3); ?>
endsnippet

snippet div "HTML DIV CakePHP"
	<?php echo $this->Html->div($1); ?>
endsnippet

snippet doc "HTML doctype CakePHP"
	<?php echo $this->Html->doctype('${1:xhtml-strict}'); ?>
endsnippet

snippet image "Image Tag CakePHP"
	<?php echo $this->Html->image('${1:image.ext}', array('alt'=>'${2:altText}'$3)); ?>
endsnippet

# More at https://raw.githubusercontent.com/chronon/vim-snippets-cakephp/master/cakephp.snippets
# :vim:ft=snippets:
